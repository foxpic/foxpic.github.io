<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>思源unlock</title>
    <url>/post/siyuanunlock.html</url>
    <content><![CDATA[<p>思源官方版S3、webdav同步需要购买，此镜像为解锁版，同步不需要购买。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line">services:</span><br><span class="line">  siyuanNote:</span><br><span class="line">    image: apkdv/siyuan-unlock</span><br><span class="line">    container_name: siyuanNote</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - LANG=zh_CN.UTF-8</span><br><span class="line">      - LC_ALL=zh_CN.UTF-8</span><br><span class="line">    user: &quot;1000:1000&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6806:6806&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/siyuan:/siyuan/workspace</span><br><span class="line">    command:</span><br><span class="line">      - &quot;--workspace=/siyuan/workspace/&quot;</span><br><span class="line">      - &quot;--accessAuthCode=XXXX&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自建</category>
      </categories>
      <tags>
        <tag>思源</tag>
        <tag>crack</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Minio自建存储命令</title>
    <url>/post/minio.html</url>
    <content><![CDATA[<p>minio官方已经把后台管理面板删减掉了，只能使用未删减版镜像进行部署。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  minio:</span><br><span class="line">    image: minio/minio:RELEASE.<span class="number">2025</span>-<span class="number">04</span>-<span class="number">22</span>T22-<span class="number">12</span>-<span class="number">26</span>Z  <span class="comment">#4月22日以后的镜像都没有管理后台</span></span><br><span class="line">    hostname: <span class="string">&quot;minio&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9000:9000&quot;</span> <span class="comment"># api 端口</span></span><br><span class="line">      - <span class="string">&quot;9001:9001&quot;</span> <span class="comment"># 控制台端口</span></span><br><span class="line">    environment:</span><br><span class="line">      MINIO_ROOT_USER: xxxx    <span class="comment"># 管理后台用户名</span></span><br><span class="line">      MINIO_ROOT_PASSWORD: xxxx   <span class="comment"># 管理后台密码，最小8个字符</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /vol1/<span class="number">1000</span>/Docker/Minio/data:/data               <span class="comment"># 映射当前目录下的data目录至容器内/data目录</span></span><br><span class="line">      - /vol1/<span class="number">1000</span>/Docker/Minio/config:/root/.minio/     <span class="comment"># 映射配置目录</span></span><br><span class="line">    command: server --console-address <span class="string">&#x27;:9001&#x27;</span> /data  <span class="comment">#指定容器中的目录 /data</span></span><br><span class="line">    privileged: true</span><br><span class="line">    restart: <span class="string">&quot;no&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自建</category>
      </categories>
      <tags>
        <tag>minio</tag>
        <tag>S3</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>easytier的使用</title>
    <url>/post/easytier.html</url>
    <content><![CDATA[<p>大家可能用过像什么 ZeroTier、Tailscale 等内网穿透的应用，它们都是需要服务供应商的服务器的。</p>
<p>今天来给大家介绍一下这个 EasyTier，也是一款内网穿透工具，它完全可以自己搭建，不需要依赖其他服务器。 就算使用公共服务器组网，也是在国内的，这样当 ZeroTier、Tailscale 无法连上时，EasyTier 可以作为一个备份，你可以这些穿透工具同时用。</p>
<p>github 笔记：<a href="https://github.com/wynemo/tech-notes/blob/master/net_utils/easytier.md">https://github.com/wynemo/tech-notes/blob/master/net_utils/easytier.md</a></p>
]]></content>
      <categories>
        <category>组网</category>
      </categories>
      <tags>
        <tag>easytier</tag>
      </tags>
  </entry>
  <entry>
    <title>[Windows] 安装黑群晖不求人，arpl在线编译安装群晖教程</title>
    <url>/post/22bf.html</url>
    <content><![CDATA[<p><strong>纠结了很久很久才发这一篇帖子，本来很早就想发了，一直拖到了现在，arpl是巴西的一位大神出的编译系统，让黑群晖DSM7.X引导的编译和安装变得非常简单</strong></p>
<p><strong>此文章部分内容引用Gxnas大神，以获取转载许可。</strong><br><strong>【编译前的准备工作】</strong><br><strong>由于需要在NAS的机器上进行引导的编译，请事先准一下：</strong><br><strong>※ 如果你决定使用物理机安装群晖系统的，那么需要把机器装好，包括键盘、鼠标、显示器、硬盘、网线等等，如果还有其他外设（比如：额外添加的网卡、扩展卡、阵列卡等）要装起来，让所有的硬件处于可以正常工作的状态，编译系统会自动检测你使用的硬件并且自动加载驱动进行编译；</strong></p>
<p><strong>※ 如果你决定使用<a href="https://www.52pojie.cn/thread-661779-1-1.html">虚拟机</a>安装群晖系统的，那么需要配置好虚拟机，包括设置CPU、内存、存储大小等等，以及有直通硬盘、直通核显、直通网卡、直通扩展卡、直通阵列卡等外设的，全部设置好，编译系统会自动检测虚拟机的硬件信息并且自动加载驱动进行编译；</strong><br><strong>※ 如果你有外网科学的环境能正常访问github网站和google网站的，那是最好的，可以减少编译等待的时间。要是没有也可以编译，只需要耐心等就是了。</strong></p>
<p><strong>【编译步骤】</strong><br><strong>1. 到【GitHub】把编译引导需要用的文件下载到电脑上（不是在NAS这台机器）。GitHub上最新的版本是v0.5-alpha1（如果将来作者更新，可以下载最新的版本），我下载的img文件，这个格式是通用的，物理机可以用，虚拟机也可以用。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3c8ce3a23.png"></p>
<p><strong>2. 下载后解压IMG文件，如果你是用物理机安装的，可以使用rufus写盘工具或者其他写盘工具也就可以，把arpl.img刷到U盘启动，如果是PVE虚拟机安装群晖的，可以上传arpl.img到PVE，用qm importdisk命令转换成群晖虚拟机的虚拟引导文件。如果是用ESXI或者VMware安装的群晖虚拟机，可以使用下面的vmdk文件或者是StarWind V2V Image Converter工具来转换格式，进行引导安装，成功安装虚拟机有：Vmware、ESXi、PVE、UnRaid、VirtualBox、Parallels Desktop，未列出来的可能不支持，请自行测试。</strong><br><img src="https://www.imglt.org/i/2022/10/29/635d3cadc7215.png"></p>
<p><strong>3. 以上步骤做完后，如果是虚拟机，就配置好后打开虚拟机的电源即可。物理机安装的话，把刷好的U盘放到NAS主机上，开机进BIOS设置从U盘启动。编译系统启动后会显示以下的界面，直接按回车进入。</strong><br><img src="https://www.imglt.org/i/2022/10/29/635d3cba7af91.png"></p>
<p><strong>4. 编译系统启动中，如果你的路由器已经开启DHCP的话，此时系统会自动去获取IP地址，请耐心等待。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3ce9eb3c2.png"></p>
<p><strong>5. 当编译系统最下面一行显示有“root@”开头的时候，就表示已经启动好了，记下编译系统的IP地址。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3cfb3276a.png"></p>
<p><strong>6. 在同一局域网下，使用另外一台电脑的浏览器（建议使用谷歌浏览器），打开编译系统显示的IP地址和端口，会显示以下界面。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d09df105.png"><br><strong>7. 选择第一行“Choose a model”回车。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d19010b6.png"></p>
<p><strong>8. 这时会显示出本机可编译黑群晖的型号，如果你的CPU比较老的话，有可能不会显示“DS918+”这个型号。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d22ae4d5.png"></p>
<p><strong>9. 选择你想要编译的黑群晖型号，我这选择的是DS918+作为教程演示，用方向键选好以后按回车键。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d387a2ff.png"></p>
<p><strong>10. 接下来在“Choose a Build Number”处回车。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d4229d75.png"></p>
<p><strong>11. 选择你想要编译黑群晖的版本，我选择的是最新的7.1.1-42962版本，用方向键选择以后按回车键。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d4d21804.png"></p>
<p><strong>12. 接下来在“Choose a serial number”处回车。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d5837e16.png"></p>
<p><strong>13. 选择“Generate a random serial number”回车的话，编译系统会随机生成一个序列号。如果你想使用自定义的序列号，可以选择“Enter a serial number”回车后输入你想要使用的序列号。我这里使用随机生成。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d63e2b55.png"></p>
<p><strong>14. 需要加载十代CPU核显驱动的，在“Addons”处回车。如果使用的CPU不是10代，此步骤跳过不做。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d6e0e0cd.png"></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d7c3c161.png"></p>
<p><strong>需要加载十代CPU核显驱动的，在“intel iGPU Drivers(10th Gen)”处回车。如果使用的CPU不是10代，此步骤跳过不做。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3d9b631a0.png"></p>
<p><strong>加载好驱动后，在“Exit”处回车返回上级菜单。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3dad2f48c.png"></p>
<p><strong>15. 在“Build the loader”处回车，开始编译。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3dc28c73d.png"></p>
<p><strong>16. 编译过程中，界面上会有进度条在跑进度，请耐心等待，等待的时间视你的网络环境而定（如果有外网科学的环境，请把此IP地址放到强制代{过}{滤}理名单，可以加快编译速度)。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3dd0f37c6.png"></p>
<p><strong>17. 引导编译完成后，系统会自动跳回这个界面，并且会多出一行菜单“Boot the loder”，在这行菜单上回车。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3ddcadd1a.png"></p>
<p><strong>18. 把NAS主机手动重启一次，编译好的引导就会自动启动，该项目编译出来的引导启动后显示的界面如下，会显示有：系统型号，系统版本，pid，vid，sn，mac等等。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3ded912f8.png"></p>
<p><strong>19. 在电脑上打开群晖助手，等待一段时间后，会搜索到DSM未安装的信息，IP地址、型号和版本与刚才编译的一致，这就对了。如果你的电脑搜索不出来的话，把电脑防火墙关掉后再试一下。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3dfc3ec10.png"></p>
<p><strong>20. 接下来就可以直接安装系统了，怎么样，是不是超级简单？后面的安装过程我就不演示了。</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e0e1e01c.png"></p>
<p><strong>【arpl编译好的引导，修改SN&#x2F;MAC方法】</strong></p>
<p><strong>1. 把NAS重启一次，在启动菜单选第三行回车；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e1d88f06.png"></p>
<p><strong>2. 在“Choose a serial number”处回车</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e3a2addb.png"></p>
<p><strong>3. 在“Enter a serial number”处回车；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e4ba75cc.png"></p>
<p><strong>4. 入你想要使用的SN，输完了按一次回车；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e5b3f684.png"></p>
<p><strong>5. 在“yes”处回车；这样MAC地址就改好了</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e6b939fc.png"></p>
<p><strong>6. 接下来修改MAC地址，在“Cmdline menu”处回车；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e7761fa1.png"></p>
<p><strong>7. 在“Define a custom MAC”处回车；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3e8662115.png"></p>
<p><strong>8.输入你想要使用的mac地址，输完了按一次回车；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3b3202006.png"></p>
<p><strong>9. 当屏幕显示如下图的时候，把NAS重启一次；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3af9370de.png"></p>
<p><strong>10.重启NAS后，看到刚才修改的mac地址已经生效了，并且IP也会自动改变，不是之前的IP地址了，在浏览器打开新的地址和端口；</strong></p>
<p><img src="https://www.imglt.org/i/2022/10/29/635d3eaa4708d.png"></p>
<p><strong>Github项目地址</strong>：<a href="https://github.com/fbelavenuto/arpl">https://github.com/fbelavenuto/arpl</a></p>
<p><strong>蓝奏云：</strong><a href="https://l13144.lanzoul.com/b00q9chfa">https://l13144.lanzoul.com/b00q9chfa</a></p>
]]></content>
      <categories>
        <category>MJJ</category>
      </categories>
      <tags>
        <tag>黑群晖</tag>
        <tag>在线编译</tag>
        <tag>DSM</tag>
      </tags>
  </entry>
  <entry>
    <title>通过s3协议，把Oracle存储桶当图床用</title>
    <url>/post/3bf7.html</url>
    <content><![CDATA[<p><del>想必大家手里都或多或少有几个甲骨文云的账号</del>，那么，除了免费的三台鸡，还能怎么充分利用甲骨文的其它免费服务呢？咱们今天把甲骨文免费的10G对象存储榨干x</p>
<p>我目前用<a href="https://github.com/Molunerfinn/PicGo">PicGo</a>作为日常使用的图床客户端，同时博客写作时还会用到<a href="https://github.com/Qexo/Qexo">Qexo</a>，因此也配置了S3的上传。这篇文章就以这两个项目的S3协议配置作为例子，抛砖引玉讲讲如何把甲骨文云的对象存储当图床用。</p>
<p>这篇文章的封面与所有配图均储存在甲骨文云对象存储中</p>
<hr>
<h2 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h2><p>无论我们想怎么连接到存储桶，首先我们需要先有一个，所以咱们先去创建一个甲骨文的对象存储，并准备好之后需要用到的信息。</p>
<ol>
<li>进入甲骨文控制台。首先点击<code>左上角-存储-存储桶</code></li>
</ol>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/1afff0c813c99bbddb9e3ee6a30ca14d.png" alt="img"><br>2. 点击<code>创建存储桶</code>，给你的图床空间起一个好记的名字（其实无所谓x），然后点击<code>创建</code>，Oracle存储桶的免费空间有20G，理论上作为图床是足够用了吧</p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/632a98db7d068e0471de4869138afa36.png" alt="img"><br>3. 存储桶建好了，接下来我们去记录一下<code>namespace</code>和<code>region</code>。首先点击右上角的用户图标，然后选择<code>租户:xxxxx</code></p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/7b63c069993a567b24cd686eced9406f.png"><br>4. 进入租户详细信息页面后，在框出来的地方有一个<code>对象存储名称空间</code>，这个就是<code>namespace</code>了，把它记下来</p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/ed2b9d89a804b575734d7baaab185c0b.png" alt="img"><br>5. 然后抬头看地址栏，<code>region=</code>后面的部分就是你的<code>region</code>了，把它也记下来</p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/2cac0fa236d2ba3d7acdcaed72330a9f.png" alt="img"><br>6. 完成大半啦！接下来回到右上角，这次点击<code>我的概要信息</code>，英文界面的话是<code>User Settings</code></p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/b63fe428d89ca442c3e2fe27cf6108ed.png" alt="img"></p>
<ol start="7">
<li>在左侧找到<code>资源</code>-<code>客户密钥</code>，英文下是<code>Customer secret keys</code></li>
</ol>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/2350e901aaccdcdf9fb19f1ed81f7d5a.png" alt="img"><br>8. 点击生成密钥，起一个名字</p>
<p><a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/31307023472beaa7fa19beaedb844290.png"><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/31307023472beaa7fa19beaedb844290.png" alt="img"></a><br>9. 把生成的密钥复制下来记好，这个只会显示一次，别弄丢了</p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/3bbb65c38a2133c2efe01d38031a7604.png" alt="img"><br>10. 于是我们就能在列表里看到密钥了，鼠标放在访问密钥上会显示完整内容</p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/e035eff2fb7af0485c7ac5e88a6acc46.png" alt="img"></p>
<p>到这里，我们就已经完成了甲骨文的配置啦！<br>接下来把它和我们的图床项目对接吧——</p>
<hr>
<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><ol>
<li><p>安装好PicGo后，在<code>插件设置</code>中搜索<code>s3</code>并安装s3协议插件。</p>
<p><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/49a01481b4225fa4fdc0e2e69b49fdd2.png" alt="我用的是框里的这个，第一个没试，应该也行？"></p>
<p>我用的是框里的这个，第一个没试，应该也行？</p>
</li>
<li><p>点击<code>图床设置-AmazonS3</code>，我们会看到很多很多需要填写的东西</p>
</li>
</ol>
<p><a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/9cfe01532fd84826e04b3d6c14d4e78d.png"><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/9cfe01532fd84826e04b3d6c14d4e78d.png" alt="img"></a><br>3. 首先看<code>应用密钥ID</code>和<code>密钥</code>，密钥ID是刚才最后一步在列表中看到的那一串字符；密钥是倒数第二步中<strong>只显示一次</strong>的那一串字符。把它们俩分别拷贝进输入框中<br>4. 然后是<code>桶</code>，这里填甲骨文对象存储桶的名字，也就是第2步中创建的名称。如果忘记的话，可以在左上角<a href="https://cloud.oracle.com/object-storage/buckets">存储-存储桶</a>中的列表里找到。<br>5. 接下来是<code>文件路径</code>，这里的参数决定了你的图片会被上传到什么目录下。有一些变量可以用，比如<strong>想存到<code>年/月</code>目录下并以<code>md5</code>命名</strong>的话，就可以填写<code>&#123;year&#125;/&#123;month&#125;/&#123;md5&#125;.&#123;extName&#125;</code>，最后一个参数是扩展名，这里抛砖引玉，各位按需填写<br>6. 权限填<code>public-read</code>就可以了，公开可读<br>7. 地区暂时不填，咱们在下面填参数<br>8. 自定义节点，这里填得麻烦一点点</p>
<p>自定义节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://[namespace].compat.objectstorage.[region].oraclecloud.com/</span><br></pre></td></tr></table></figure>

<p>不要照抄，这里两个中括号中的内容是需要替换的，<code>namespace</code>和<code>region</code>想必大家还有印象，就是上面第三步中找到的两串字符，把它们替换进去</p>
<p>9.自定义域名，这里同样需要有需要替换的部分。<code>region</code>和<code>namespace</code>和上面一样，<code>bucketname</code>是桶名，第1步里那一个</p>
<p>自定义域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://objectstorage.[region].oraclecloud.com/n/[namespace]]/b/[bucketname]/o</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>点击确认，现在可以去上传区试着上传一张图片看看啦~</li>
</ol>
<p><a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/0147fe846582f97fef6d28250fb62b35.png"><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/0147fe846582f97fef6d28250fb62b35.png" alt="img"></a></p>
<hr>
<h2 id="Qexo"><a href="#Qexo" class="headerlink" title="Qexo"></a>Qexo</h2><p>搭建好Qexo后，在设置中找到<code>图床配置</code>，<code>图床类型</code>选择S3协议后，便能看到相关的配置项了<br><a href="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/6fe3193ce5ed897bd8dd2435ce0f040c.png"><img src="https://objectstorage.ap-tokyo-1.oraclecloud.com/n/nrij9siyrqif/b/bucket-20220219-2216/o/2022/04/6fe3193ce5ed897bd8dd2435ce0f040c.png" alt="img"></a><br>这里的各项可以参考上面PicGo的配置，大同小异对应填好后提交保存就可以啦——</p>
]]></content>
      <categories>
        <category>MJJ</category>
      </categories>
      <tags>
        <tag>S3</tag>
        <tag>存储桶</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>青龙面板使用扩展聚看点</title>
    <url>/post/5637.html</url>
    <content><![CDATA[<p>自动执行任务，挂机</p>
<p>聚看点地址：<a href="http://a.app.qq.com/o/simple.jsp?ctx=1638083774374&pkgname=com.xiangzi.jukandian&ckey=CK1416436838701">http://a.app.qq.com/o/simple.jsp?ctx=1638083774374&amp;pkgname=com.xiangzi.jukandian&amp;ckey=CK1416436838701</a><br>邀请码必填得金币 24532859<br>教程开始：</p>
<span id="more"></span>

<h3 id="★★★★★第一步★★★★★"><a href="#★★★★★第一步★★★★★" class="headerlink" title="★★★★★第一步★★★★★"></a>★★★★★第一步★★★★★</h3><p>打开青龙-定时任务–添加任务<br>名称：聚看点脚本<br>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ql raw http://47.101.146.160/scripts/jkd.js</span><br></pre></td></tr></table></figure>

<p>定时规则：</p>
<p><code>3 3 * * *</code></p>
<p>跑完以后会自动生成一个名字为 聚看点的任务<br>去手动修改定时</p>
<p><code>20 1-23/2 * * *</code><br>（意思每二小时第二十分钟跑一次）根据你的喜好</p>
<h3 id="★★★★★第二步★★★★★"><a href="#★★★★★第二步★★★★★" class="headerlink" title="★★★★★第二步★★★★★"></a>★★★★★第二步★★★★★</h3><p>打开抓包软件 自行抓包<br><strong>苹果</strong> 用的软件是stream<br>抓包方式 打开抓包软件，打开聚看点，点击 我的 任务中心 随便点几下，返回抓包软件，-查看抓包数据<br>需要抓的ck就是 <code>cookIE-jkdhd</code>那后边的那一串（个数字开头的 到！就结束ios 或者Android后面都不要）<br><strong>安卓</strong>使用小黄鸟软件，浏览器自行下载<br>打开抓包软件，打开聚看点，点击 我的 任务中心 随便点几下，返回抓包软件，右上角搜索<code>xz_jkd_appkey</code>即可，复制感叹号前面的值</p>
<h3 id="★★★★★第三步★★★★★"><a href="#★★★★★第三步★★★★★" class="headerlink" title="★★★★★第三步★★★★★"></a>★★★★★第三步★★★★★</h3><p>打开青龙 配置文件拉倒最下边<br>如果只有跑一个就按照下面的模板填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export jkdhd=&#x27;&#123;&quot;openid&quot;: &quot;你抓包的CK&quot;&#125;&#x27;</span><br><span class="line">export jkdck=&#x27;&#123;&quot;Cookie&quot;:&quot;xz_jkd_appkey=你抓包的CK&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>（没错 2个都是填写CK那个数字 2个变量填一样 填一样）</p>
<h3 id="★★★★★第四步★★★★★"><a href="#★★★★★第四步★★★★★" class="headerlink" title="★★★★★第四步★★★★★"></a>★★★★★第四步★★★★★</h3><p>多账户用@隔开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export jkdhd=&#x27;&#123;&quot;openid&quot;: &quot;替换的CK&quot;&#125;&#x27;@&#x27;&#123;&quot;openid&quot;: &quot;替换的CK&quot;&#125;&#x27;</span><br><span class="line">export jkdck=&#x27;&#123;&quot;Cookie&quot;:&quot;xz_jkd_appkey=替换的CK&quot;&#125;&#x27;@&#x27;&#123;&quot;Cookie&quot;:&quot;xz_jkd_appkey=替换的CK&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>青龙</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>青龙</tag>
        <tag>聚看点</tag>
      </tags>
  </entry>
  <entry>
    <title>Instagram美女</title>
    <url>/post/349c.html</url>
    <content><![CDATA[<p>生活还是要来点养眼的东西的，来点美女看看！祝快乐！</p>
<span id="more"></span>
<p><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011901.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011902.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011903.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011904.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011905.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011906.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011907.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011908.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011909.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011910.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011911.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011912.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011913.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011914.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011915.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011916.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011917.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011918.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011919.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011920.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011921.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011922.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011923.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011924.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011925.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011926.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011927.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011928.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011929.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011930.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011931.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011932.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011933.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011934.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011935.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011936.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011937.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011938.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011939.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011940.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011941.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011942.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011943.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011944.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011945.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011946.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011947.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011948.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011949.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011950.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011951.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011952.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011953.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011954.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011955.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011956.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011957.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011958.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011959.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011960.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011961.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011962.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011963.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram011964.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_001.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_002.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_003.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_004.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_005.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_006.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_007.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_008.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_009.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_010.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_011.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_012.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_013.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_014.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_015.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_016.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_017.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_018.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_019.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_020.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_021.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_022.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_023.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_024.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_025.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_026.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_027.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_028.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_029.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_030.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_031.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_032.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_033.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_034.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_035.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_036.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_037.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_038.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_039.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_040.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_041.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_042.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_043.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_044.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_045.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_046.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_047.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_048.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_049.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_050.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_051.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_052.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_053.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_054.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_055.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_056.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_057.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_058.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_059.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_060.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_061.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_062.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_063.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_064.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_065.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_066.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_067.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_068.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_069.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_070.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_071.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_072.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_073.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_074.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_075.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_076.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_077.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_078.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_079.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_080.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_081.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_082.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_083.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_084.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_085.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_086.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_087.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_088.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_089.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_090.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_091.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_092.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_093.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_094.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_095.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_096.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_097.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_098.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_099.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_100.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_101.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_102.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_103.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_104.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_105.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_106.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_107.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_108.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_109.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_110.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_111.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_112.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_113.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_114.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_115.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_116.jpg"><br><img src="https://cdn.jsdelivr.net/gh/chwl66/girl/Instagram/Instagram0116_117.jpg"></p>
]]></content>
      <categories>
        <category>美女</category>
      </categories>
      <tags>
        <tag>Instagram</tag>
        <tag>美女</tag>
      </tags>
  </entry>
  <entry>
    <title>Backblaze B2 + CloudFlare 搭建图床</title>
    <url>/post/78a.html</url>
    <content><![CDATA[<p>Backblaze B2 在大厂的对象存储里算是非常便宜的了，如果不考虑国内访问速度，应该是非常不错的选择。由于 B2 与 CloudFlare 合作，所以套上 CloudFlare 后并不会消耗流量，所以拿来做图床是个不错的选择，下面介绍下步骤。 </p>
<span id="more"></span>

<h1 id="配置-CDN"><a href="#配置-CDN" class="headerlink" title="配置 CDN"></a><strong>配置 CDN</strong></h1><p>以下步骤参考官方教程</p>
<p><a href="https://help.backblaze.com/hc/en-us/articles/217666928-Using-Backblaze-B2-with-the-Cloudflare-CDN">Using Backblaze B2 with the Cloudflare CDN</a></p>
<ol>
<li>创建一个公开的存储桶并上传文件</li>
<li>通过查看文件详细信息获得地址，比如我这里就是</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://f002.backblazeb2.com/file/&lt;存储桶名称&gt;/......</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.69s.pp.ua/2021/09/09/47282c5a929356b3.png" alt="img"></p>
<ol start="3">
<li>在 CloudFlare 里新建一条 CNAME 解析，地址就填刚才获得的这个 <code>f002.backblazeb2.com</code></li>
</ol>
<p><img src="https://cdn.69s.pp.ua/2021/09/09/366584af8b8d0a4c.png" alt="img"></p>
<ol start="4">
<li>在 页面规则 里 创建页面规则</li>
</ol>
<p><img src="https://cdn.69s.pp.ua/2021/09/09/7d909f88d69ece24.png" alt="img"></p>
<ol start="5">
<li>URL 匹配填写如下内容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://&lt;刚才解析的域名&gt;/file/&lt;存储桶&gt;/*</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.69s.pp.ua/2021/09/09/a36ccf69c2a172a4.png" alt="img"></p>
<p>添加设置中选择 缓存级别 — 缓存所有内容</p>
<ol start="6">
<li>再添加一条</li>
</ol>
<p>URL 匹配填写如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://&lt;解析的域名&gt;/file/*/*</span><br></pre></td></tr></table></figure>

<p>设置填写 转发 URL — 302重定向 — <a href="https://secure.backblaze.com/404notfound">https://secure.backblaze.com/404notfound</a></p>
<p><img src="https://cdn.69s.pp.ua/2021/09/09/6f272bfbd324d798.png" alt="img"></p>
<ol start="7">
<li>设定缓存控制时间，内容如下</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;“cache-control”:”max-age=720000&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.69s.pp.ua/2021/09/09/03558daa2aca54e7.png" alt="img"></p>
<p><img src="https://cdn.69s.pp.ua/2021/09/09/46e98b04803cb059.png" alt="img"></p>
<h1 id="隐藏-Bucket-名称"><a href="#隐藏-Bucket-名称" class="headerlink" title="隐藏 Bucket 名称"></a><strong>隐藏 Bucket 名称</strong></h1><p>这样设置完后，虽然能免流了，但是 Bucket 名称还是暴露了，为了避免被人搞事情，所以要隐藏 Bucket 名称。这里用到了 cf 的 workers，参考下面站点的内容。</p>
<p><a href="https://jross.me/free-personal-image-hosting-with-backblaze-b2-and-cloudflare-workers/">Using Backblaze B2 and Cloudflare Workers for free image hosting</a></p>
<ol>
<li>Workers — 管理 Workers</li>
</ol>
<p><img src="https://cdn.69s.pp.ua/2021/09/09/b25ba6de9930f522.png" alt="img"></p>
<ol start="2">
<li>添加一个 Worker 并部署，内容如下。你需要做的就是修改开头的 b2Domain 和 b2Bucket 两个变量即可。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">const b2Domain = &#x27;files.jross.me&#x27;; // configure this as per instructions above</span><br><span class="line">const b2Bucket = &#x27;jross-files&#x27;; // configure this as per instructions aboveconst b2UrlPath = `/file/$&#123;b2Bucket&#125;/`;</span><br><span class="line">addEventListener(&#x27;fetch&#x27;, event =&gt; &#123;</span><br><span class="line"> return event.respondWith(fileReq(event));</span><br><span class="line">&#125;);// define the file extensions we wish to add basic access control headers to</span><br><span class="line">const corsFileTypes = [&#x27;png&#x27;, &#x27;jpg&#x27;, &#x27;gif&#x27;, &#x27;jpeg&#x27;, &#x27;webp&#x27;];// backblaze returns some additional headers that are useful for debugging, but unnecessary in production. We can remove these to save some size</span><br><span class="line">const removeHeaders = [</span><br><span class="line"> &#x27;x-bz-content-sha1&#x27;,</span><br><span class="line"> &#x27;x-bz-file-id&#x27;,</span><br><span class="line"> &#x27;x-bz-file-name&#x27;,</span><br><span class="line"> &#x27;x-bz-info-src_last_modified_millis&#x27;,</span><br><span class="line"> &#x27;X-Bz-Upload-Timestamp&#x27;,</span><br><span class="line"> &#x27;Expires&#x27;</span><br><span class="line">];</span><br><span class="line">const expiration = 31536000; // override browser cache for images - 1 year// define a function we can re-use to fix headers</span><br><span class="line">const fixHeaders = function(url, status, headers)&#123;</span><br><span class="line"> let newHdrs = new Headers(headers);</span><br><span class="line"> // add basic cors headers for images</span><br><span class="line"> if(corsFileTypes.includes(url.pathname.split(&#x27;.&#x27;).pop()))&#123;</span><br><span class="line">  newHdrs.set(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line"> &#125;</span><br><span class="line"> // override browser cache for files when 200</span><br><span class="line"> if(status === 200)&#123;</span><br><span class="line">  newHdrs.set(&#x27;Cache-Control&#x27;, &quot;public, max-age=&quot; + expiration);</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">  // only cache other things for 5 minutes</span><br><span class="line">  newHdrs.set(&#x27;Cache-Control&#x27;, &#x27;public, max-age=300&#x27;);</span><br><span class="line"> &#125;</span><br><span class="line"> // set ETag for efficient caching where possible</span><br><span class="line"> const ETag = newHdrs.get(&#x27;x-bz-content-sha1&#x27;) || newHdrs.get(&#x27;x-bz-info-src_last_modified_millis&#x27;) || newHdrs.get(&#x27;x-bz-file-id&#x27;);</span><br><span class="line"> if(ETag)&#123;</span><br><span class="line">  newHdrs.set(&#x27;ETag&#x27;, ETag);</span><br><span class="line"> &#125;</span><br><span class="line"> // remove unnecessary headers</span><br><span class="line"> removeHeaders.forEach(header =&gt; &#123;</span><br><span class="line">  newHdrs.delete(header);</span><br><span class="line"> &#125;);</span><br><span class="line"> return newHdrs;</span><br><span class="line">&#125;;</span><br><span class="line">async function fileReq(event)&#123;</span><br><span class="line"> const cache = caches.default; // Cloudflare edge caching</span><br><span class="line"> const url = new URL(event.request.url);</span><br><span class="line"> if(url.host === b2Domain &amp;&amp; !url.pathname.startsWith(b2UrlPath))&#123;</span><br><span class="line">  url.pathname = b2UrlPath + url.pathname;</span><br><span class="line"> &#125;</span><br><span class="line"> let response = await cache.match(url); // try to find match for this request in the edge cache</span><br><span class="line"> if(response)&#123;</span><br><span class="line">  // use cache found on Cloudflare edge. Set X-Worker-Cache header for helpful debug</span><br><span class="line">  let newHdrs = fixHeaders(url, response.status, response.headers);</span><br><span class="line">  newHdrs.set(&#x27;X-Worker-Cache&#x27;, &quot;true&quot;);</span><br><span class="line">  return new Response(response.body, &#123;</span><br><span class="line">   status: response.status,</span><br><span class="line">   statusText: response.statusText,</span><br><span class="line">   headers: newHdrs</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> // no cache, fetch image, apply Cloudflare lossless compression</span><br><span class="line"> response = await fetch(url, &#123;cf: &#123;polish: &quot;lossless&quot;&#125;&#125;);</span><br><span class="line"> let newHdrs = fixHeaders(url, response.status, response.headers);</span><br><span class="line"> response = new Response(response.body, &#123;</span><br><span class="line">  status: response.status,</span><br><span class="line">  statusText: response.statusText,</span><br><span class="line">  headers: newHdrs</span><br><span class="line"> &#125;);event.waitUntil(cache.put(url, response.clone()));</span><br><span class="line"> return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加完后设置路由</li>
</ol>
<p><img src="https://cdn.69s.pp.ua/2021/09/09/2eae4be92220cc7c.png" alt="img"></p>
<ol start="4">
<li>地址为</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;解析的域名&gt;/*</span><br></pre></td></tr></table></figure>

<p>Worker 就选择刚才添加的 Worker</p>
<p><img src="https://cdn.69s.pp.ua/2021/09/09/cb68838c7b51d0c3.png" alt="img"></p>
<p>然后就可以直接通过 https:&#x2F;&#x2F;&lt;域名&gt;&#x2F;&lt;Bucket内路径&gt; 引用文件了</p>
]]></content>
      <categories>
        <category>MJJ</category>
      </categories>
      <tags>
        <tag>Backblaze</tag>
        <tag>B2</tag>
        <tag>Cloudflare</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 主题中添加本地搜索功能</title>
    <url>/post/bbb.html</url>
    <content><![CDATA[<p>在 next 主题侧边列表有一个 搜索 菜单，但是点击之后页面会处于卡死状态，后台显示是 404，需要添加搜索插件才可以。<br>在这里插入图片描述</p>
<span id="more"></span>
<h2 id="1、安装本地搜索插件-hexo-generator-search"><a href="#1、安装本地搜索插件-hexo-generator-search" class="headerlink" title="1、安装本地搜索插件 hexo-generator-search"></a>1、安装本地搜索插件 hexo-generator-search</h2><p> 安装插件，用于生成博客索引数据（在博客根目录下执行下列命令）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>安装之后，会在站点根目录下创建一个 search.xml 文件。</p>
<h2 id="2、修改站点配置文件"><a href="#2、修改站点配置文件" class="headerlink" title="2、修改站点配置文件"></a>2、修改站点配置文件</h2><p>在站点配置文件 _config.yml 中添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Search </span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>path：索引文件的路径，相对于站点根目录</p>
<p>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</p>
<p>limit：限制搜索的条目数</p>
<h2 id="3、主题配置文件"><a href="#3、主题配置文件" class="headerlink" title="3、主题配置文件"></a>3、主题配置文件</h2><p>在主题配置文件 _config.yml 中找到如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>

<p>确保 enable 设成 true。</p>
<p>top_n_per_article 字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</p>
<p>然后，重新部署网站即可愉快的使用本地搜索功能了。​</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>搜索功能</tag>
      </tags>
  </entry>
  <entry>
    <title>Okteto免费搭建Bitwarden教程（已失效）</title>
    <url>/post/a01f.html</url>
    <content><![CDATA[<p>okteto已经取消了compose部署方式，下面的方法已经失效。 </p>
<!--more-->

<p>在Compose标签下输入以下配置即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  bit:</span><br><span class="line">    public: true</span><br><span class="line">    container_name: bitwarden</span><br><span class="line">    image: vaultwarden/server:alpine</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/</span><br><span class="line">    environment:</span><br><span class="line">      - WEBSOCKET_ENABLED=true</span><br><span class="line">      - SIGNUPS_ALLOWED=true</span><br><span class="line">      - WEB_VAULT_ENABLED=true</span><br><span class="line">      - ADMIN_TOKEN=%管理员密码%</span><br></pre></td></tr></table></figure>

<p>“%管理员密码%”请自行替换。</p>
<p>注意事项：<br>1.&#x2F;data&#x2F;是挂载目录，重启后该目录外的数据都会丢失。<br>2.容器仍然会24小时休眠，但是休眠后访问容器网址就可以立即唤醒。建议配置一个网站监控，保证容器休眠后立即重启。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Okteto</tag>
        <tag>bitwarden</tag>
        <tag>免费</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram Bot 控制 Aria2 下载并自动上传到 Google Drive、OneDrive</title>
    <url>/post/undefined.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL0hvdUNvZGVyL3RlbGUtYXJpYTI=">tele-aria2</a> 是一个可以控制 Aria2 服务端的 Telegram Bot ，它可以发任务到远程 Aria2 进行下载、查看任务、删除任务等操作。准确来说它是一个 Aria2 前端程序，只不过形式不是我们所熟知的 Ar­i­aNg 那样的 Web 页面，而是以一个聊天机器人的形式存在。如果 Aria2 配置好联动 Rclone 自动上传，那么就可以实现发送下载链接给 Bot → Aria2 下载 → Rclone 自动上传文件到 Google Drive 等网盘的骚操作。</p>
<span id="more"></span>

<h2 id="部署-Aria2"><a href="#部署-Aria2" class="headerlink" title="部署 Aria2"></a>部署 Aria2</h2><p><a href="https://p3terx.com/archives/offline-download-of-onedrive-gdrive.html">Aria2 一键安装管理脚本 增强版</a> (GNU&#x2F;Linux) 和 <a href="https://p3terx.com/archives/docker-aria2-pro.html">Aria2 Pro</a> (Docker) 任选其一，这里不做赘述了。如果需要自动上传那么就需要配置联动 Rclone 的步骤，能正常下载并上传即代表部署工作完成，否则忽略这个步骤即可。</p>
<h2 id="获取-Telegram-Bot-访问令牌"><a href="#获取-Telegram-Bot-访问令牌" class="headerlink" title="获取 Telegram Bot 访问令牌"></a>获取 Telegram Bot 访问令牌</h2><p>使用 <a href="https://p3terx.com/go/aHR0cHM6Ly90ZWxlZ3JhbS5tZS9ib3RmYXRoZXI=">@BotFather</a> 创建自己的 Bot 并获取访问令牌（<code>&lt;TOKEN&gt;</code>），过程如图所示：</p>
<p><a href="https://p3terximg.gitee.io/post/20200630023817.png"><img src="https://p3terximg.gitee.io/post/20200630023817.png" alt="img"></a></p>
<h2 id="获取用户-ID"><a href="#获取用户-ID" class="headerlink" title="获取用户 ID"></a>获取用户 ID</h2><ul>
<li><strong>给刚创建 Bot 随便发送一个信息</strong></li>
<li>访问<code>https://api.telegram.org/bot&lt;TOKEN&gt;/getUpdates</code>（替换<code>&lt;TOKEN&gt;</code>字段），会获得一长串信息，其中<code>&quot;id&quot;:</code>字段后面的数字就是所要获取的用户 ID 。</li>
</ul>
<h2 id="部署-tele-aria2"><a href="#部署-tele-aria2" class="headerlink" title="部署 tele-aria2"></a>部署 tele-aria2</h2><p>为了防止环境不统一导致部署失败将使用 Docker 进行部署。</p>
<ul>
<li>首先编写一个<a href="https://p3terx.com/go/aHR0cHM6Ly9naXRodWIuY29tL0hvdUNvZGVyL3RlbGUtYXJpYTIjY29uZmlndXJhdGlvbi1maWxlLWV4YW1wbGU=">配置文件</a>，从上到下依次是 Aria2 RPC 地址、密钥、代理地址、Bot 访问令牌、用户 ID、任务显示数量最大值。根据自己的实际情况填写，自由地区的 VPS 可以去掉代理地址配置。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aria2-server&quot;: &quot;ws://10.0.0.2:6800/jsonrpc&quot;,</span><br><span class="line">  &quot;aria2-key&quot;: &quot;P3TERX_2020&quot;,</span><br><span class="line">  &quot;proxy&quot;: &quot;http://127.0.0.1:7890&quot;,</span><br><span class="line">  &quot;bot-key&quot;: &quot;123456789:xyz&quot;,</span><br><span class="line">  &quot;user-id&quot;: &quot;123456&quot;,</span><br><span class="line">  &quot;max-index&quot;: 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>TIPS:</strong> 如果你需要多用户支持，用户 ID 之间用<code>,</code>(半角逗号)隔开即可，就像这样：<code>&quot;user-id&quot;: &quot;123,456,789&quot;</code></p>
</blockquote>
<ul>
<li>把编写好的配置文件保存到 <code>~/.tele-aria2-conf.json</code>（这个文件名称和路径随意，自己知道就行，后面的 Docker 运行命令中记得替换）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.tele-aria2-conf.json</span><br></pre></td></tr></table></figure>

<ul>
<li>运行 Docker 容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name tele-aria2 \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    --log-opt max-size=1m \</span><br><span class="line">    --network host \</span><br><span class="line">    -v ~/.tele-aria2-conf.json:/config.json \</span><br><span class="line">    p3terx/tele-aria2:0.2.2</span><br></pre></td></tr></table></figure>

<ul>
<li>发送<code>/start</code>给 Bot ，Bot 回复并弹出菜单即代表部署成果。</li>
</ul>
<p><a href="https://p3terximg.gitee.io/post/20200630030421.png"><img src="https://p3terximg.gitee.io/post/20200630030421.png" alt="img"></a></p>
<h2 id="使用-Bot-控制-Aria2-下载"><a href="#使用-Bot-控制-Aria2-下载" class="headerlink" title="使用 Bot 控制 Aria2 下载"></a>使用 Bot 控制 Aria2 下载</h2><ul>
<li>发送链接或者种子文件即可开始下载，下载完成会有通知。</li>
</ul>
<p><a href="https://p3terximg.gitee.io/post/20200630032449.png"><img src="https://p3terximg.gitee.io/post/20200630032449.png" alt="img"></a></p>
<ul>
<li>如果配置好了自动上传，那么等待上传完成即可。</li>
</ul>
<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul>
<li>无法在 Bot 中直接查看上传进度，毕竟只是 Aria2 的前端</li>
<li>暂时一个 Bot 只能控制一个 Aria2 服务端</li>
</ul>
<h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>tele-aria2 目前尚处于初级开发阶段，功能比较极简，不过 Aria2 绝大多数时间的使用场景是添加、暂停、删除任务。Ar­i­aNg 功能强大，但由于开发者为了保持操作逻辑的严谨性（添加任务前可修改默认参数），因此牺牲掉批量添加种子功能，而 tele-aria2 可以一次性发送多个种子来实现批量添加种子，一定程度上也弥补了 Ar­i­aNg 这个功能的缺失。所以说在日常使用场景中 tele-aria2 可以替代 Ar­i­aNg ，而在需要单独定制任务参数或者查看任务进度时使用 Ar­i­aNg ，二者相辅相成应该算是目前 Aria2 前端最佳解决方案。</p>
]]></content>
      <tags>
        <tag>telegram</tag>
        <tag>Aria2</tag>
        <tag>Onedrive</tag>
        <tag>Google drive</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 bitwarden_rs 搭建自托管的密码服务器</title>
    <url>/post/fcad.html</url>
    <content><![CDATA[<p>计算机网络技术毕业，个人很注重网络及信息安全，看过一篇关于有规律的管理密码的文章，自己也就建了一套类似规则；<br>但是几年前爆发的密码泄露问题还是查询到密码泄露，就注册了 LastPass 进行密码管理：日常密码继续按规律设置、更新，不常登录的使用 LastPass 计算随机密码并添加站点。<br>一种用着还算顺利，不过 LastPass 浏览器插件时不时提示无法连上服务器，应该是服务器在国外的原因；</p>
<span id="more"></span>
<p>然后无意中看到 <a href="https://bitwarden.com/#download">Bitwarden</a> 及其衍生版本 <a href="https://github.com/dani-garcia/bitwarden_rs">bitwarden_rs</a>，刚好<a href="https://yuwei.cc/bwh-vps.html">搬瓦工</a>就搭了个梯子相当于闲置，就打算也自建一个试试效果。</p>
<h2 id="Docker-环境搭建"><a href="#Docker-环境搭建" class="headerlink" title="Docker 环境搭建"></a>Docker 环境搭建</h2><h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p>CentOS 7（64-bit），内核版本不能低于3.10；</p>
<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>较旧版本的Docker被称为docker或docker-engine。如果已安装这些，请卸载它们以及相关的依赖项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">  docker-client \</span><br><span class="line">  docker-client-latest \</span><br><span class="line">  docker-common \</span><br><span class="line">  docker-latest \</span><br><span class="line">  docker-latest-logrotate \</span><br><span class="line">  docker-logrotate \</span><br><span class="line">  docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>使用 yum 安装</p>
<h4 id="安装所需依赖包"><a href="#安装所需依赖包" class="headerlink" title="安装所需依赖包"></a>安装所需依赖包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"># 使用国内源（阿里云）</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"># 使用官方源</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"># 如果需要测试版本的 Docker CE 请使用以下命令</span><br><span class="line">yum-config-manager --enable docker-ce-test</span><br><span class="line"># 如果需要每日构建版本的 Docker CE 请使用以下命令</span><br><span class="line">yum-config-manager --enable docker-ce-nightly</span><br></pre></td></tr></table></figure>

<h4 id="安装-Docker-CE-并设置开机启动"><a href="#安装-Docker-CE-并设置开机启动" class="headerlink" title="安装 Docker-CE 并设置开机启动"></a>安装 Docker-CE 并设置开机启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache # 更新 yum 缓存</span><br><span class="line">yum -y install docker-ce --nobest # 安装 Docker-CE</span><br><span class="line">systemctl enable docker # 设置开机自启</span><br><span class="line">systemctl start docker # 启动 Docker-CE</span><br></pre></td></tr></table></figure>

<p>使用脚本自动安装<br>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure>

<h3 id="添加内核参数"><a href="#添加内核参数" class="headerlink" title="添加内核参数"></a>添加内核参数</h3><p>如果在 CentOS 使用 Docker CE 看到下面的这些警告信息：</p>
<blockquote>
<p>WARNING: bridge-nf-call-iptables is disabled<br>WARNING: bridge-nf-call-ip6tables is disabled</p>
</blockquote>
<p>请添加内核配置参数以启用这些功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tee -a /etc/sysctl.conf &lt;&lt;-EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl -p # 重新加载 sysctl.conf</span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><table>
<thead>
<tr>
<th><a href="https://www.runoob.com/docker/centos-docker-install.html">菜鸟教程</a></th>
<th><a href="https://yeasy.gitbooks.io/docker_practice/content/">从入门到实践</a></th>
<th><a href="https://docs.docker.com/install/linux/docker-ce/centos/">官方文档</a></th>
<th><a href="https://yq.aliyun.com/articles/110806">阿里云镜像源站</a></th>
<th><a href="https://www.cnblogs.com/wushuaishuai/p/9984228.html#_label0">国内仓库和镜像</a></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="部署-Bitwarden-rs"><a href="#部署-Bitwarden-rs" class="headerlink" title="部署 Bitwarden_rs"></a>部署 Bitwarden_rs</h2><h3 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h3><p>由于bitwarden改名，所以库地址有所更改！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull vaultwarden/server:latest</span><br><span class="line">docker run -d --name bitwarden -v /bw-data/:/data/ -p 6666:80 bitwardenrs/server:latest</span><br></pre></td></tr></table></figure>

<h4 id="官方提供"><a href="#官方提供" class="headerlink" title="官方提供"></a>官方提供</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -Lso bitwarden.sh https://go.btwrdn.co/bw-sh \</span><br><span class="line">  &amp;&amp; chmod +x bitwarden.sh</span><br><span class="line">./bitwarden.sh install</span><br><span class="line">./bitwarden.sh start</span><br></pre></td></tr></table></figure>

<h3 id="自定义部署"><a href="#自定义部署" class="headerlink" title="自定义部署"></a>自定义部署</h3><p>自定义一些参数，加入 HTTPS 支持等…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 拉取 bitwarden_rs 镜像</span><br><span class="line">docker pull vaultwarden/server:latest</span><br><span class="line"># 生成一个 admin 用户管理页面的 token</span><br><span class="line">openssl rand -base64 48</span><br><span class="line"># 生成 ssl 证书，以启用 https，推荐使用 acme.sh 免费申请及自动续签</span><br><span class="line"></span><br><span class="line"># 运行 bitwarden_rs 容器</span><br><span class="line">docker run -d --name bitwarden \</span><br><span class="line">    -e SIGNUPS_ALLOWED=false \</span><br><span class="line">    -e INVITATIONS_ALLOWED=false \</span><br><span class="line">    -e ADMIN_TOKEN=step2_generated_token \</span><br><span class="line">    -e ROCKET_TLS=&#x27;&#123;certs=&quot;/data/v2ray.crt&quot;,key=&quot;/data/v2ray.key&quot;&#125;&#x27; \</span><br><span class="line">    -e DOMAIN=https://bwh.vioe.cc/ \</span><br><span class="line">    -e LOG_FILE=/path/to/log \</span><br><span class="line">    -e LOG_LEVEL=warn -e EXTENDED_LOGGING=true \</span><br><span class="line">    -e DATA_FOLDER=/path/to/data/folder \</span><br><span class="line">    -p 443:80 \</span><br><span class="line">    -v /path/to/host/ssl/:/path/to/docker/ssl/</span><br><span class="line">    -v /path/to/host/data/folder:/path/to/docker/data/folder \</span><br><span class="line">    vaultwarden/server:latest</span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<blockquote>
<p>SIGNUP_ALLOWED：是否允许注册<br>INVITATIONS_ALLOWED：是否允许组织邀请注册<br>ADMIN_TOKEN：用户管理界面 (&#x2F;admin)，可用于删除用户及邀请用户注册<br>ROCKET_TLS：ssl 证书信息，同时需要配置 -v &#x2F;path&#x2F;to&#x2F;host&#x2F;ssl&#x2F;:&#x2F;path&#x2F;to&#x2F;docker&#x2F;ssl&#x2F; 卷，前者为宿主机 ssl 证书的位置，后者为容器证书位置<br>DOMAIN：域名<br>LOG_FILE、LOG_LEVEL、EXTENDED_LOGGING：日志保存文件路径以及日志等级定义<br>DATA_FOLDER：docker 容器数据保存文件夹（默认为 &#x2F;data），除了定义这个文件夹之外，还可以定义附件、图标缓存、数据库等参数<br>DATABASE_URL：数据库路径<br>ATTACHMENT_FOLDER：附件路径<br>ICON_CACHE_FOLDER：图标缓存路径</p>
</blockquote>
<p>更多参数可参考<a href="https://github.com/dani-garcia/bitwarden_rs/wiki">官方 Wiki</a></p>
<h3 id="容器操作命令"><a href="#容器操作命令" class="headerlink" title="容器操作命令"></a>容器操作命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $name 为 docker run 中定义的 name</span><br><span class="line"># 启动容器</span><br><span class="line">docker start $name</span><br><span class="line"># 停止容器</span><br><span class="line">docker stop $name</span><br><span class="line"># 删除容器</span><br><span class="line">docker rm $name</span><br><span class="line"># 查看运行容器</span><br><span class="line">docker ps -as</span><br></pre></td></tr></table></figure>

<h3 id="升级-Bitwarden-镜像"><a href="#升级-Bitwarden-镜像" class="headerlink" title="升级 Bitwarden 镜像"></a>升级 Bitwarden 镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重新拉取镜像</span><br><span class="line">docker pull vaultwarden/server:latest</span><br><span class="line"># 停止、删除原容器</span><br><span class="line">docker stop bitwarden</span><br><span class="line">docker rm bitwarden</span><br><span class="line"># 重新运行 docker run 命令</span><br><span class="line"># 查看镜像文件</span><br><span class="line">docker image ls</span><br><span class="line"># 删除原镜像文件, $ID 在 step4 中可以看到</span><br><span class="line">docker image rm $ID</span><br></pre></td></tr></table></figure>

<h3 id="上述都太繁杂，使用-Docker-Compose-部署"><a href="#上述都太繁杂，使用-Docker-Compose-部署" class="headerlink" title="上述都太繁杂，使用 Docker Compose 部署"></a>上述都太繁杂，使用 Docker Compose 部署</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-uname -s-uname -m -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>自行选择安装目录用于存储数据，如安装到 &#x2F;home&#x2F;bitwarden<br><code>cd /home &amp;&amp; mkdir bitwarden &amp;&amp; cd bitwarden</code><br>准备一个配置文件 config.env<br><code>cat &gt;&gt; config.env &lt;&lt; EOF</code><br>写入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SIGNUPS_ALLOWED=true</span><br><span class="line">DOMAIN=https://yourdomain.com</span><br><span class="line">DATABASE_URL=/data/bitwarden.db</span><br><span class="line">ROCKET_WORKERS=10</span><br><span class="line">WEB_VAULT_ENABLED=true</span><br><span class="line">ADMIN_TOKEN=xxxxxx</span><br><span class="line">WEBSOCKET_ENABLED=true</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>准备服务描述文件 docker-compose.yml：<br><code>cat &gt;&gt; docker-compose.yml &lt;&lt; EOF</code><br>写入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  bitwarden:</span><br><span class="line">    image: vaultwarden/server:latest</span><br><span class="line">    container_name: bitwarden</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">    env_file:</span><br><span class="line">      - config.env</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6666:80&quot;</span><br><span class="line">      - &quot;8888:3012&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>文件说明：</p>
<blockquote>
<p>bitwarden 现在是唯一一个服务；<br>image: vaultwarden&#x2F;server:latest 指定使用 Docker Hub 的 vaultwarden&#x2F;server 最新镜像；<br>volumes 中指定将容器内的 &#x2F;data 目录挂载到宿主机的当前目录下的 data 目录，这样你可以在宿主机上执行数据库的备份操作；<br>ports 指定将容器内的 80 端口映射到了宿主机的 6666 端口；</p>
</blockquote>
<p>以后对 bitwarden 服务做的所有操作，都需要预先进入这两个配置文件所在的目录内。<br>拉取镜像：<code>docker-compose up -d</code></p>
<h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h3><p>请查看：<a href="https://github.com/dani-garcia/bitwarden_rs/wiki/Proxy-examples">https://github.com/dani-garcia/bitwarden_rs/wiki/Proxy-examples</a></p>
<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>编辑 rc.local文件：<code>vi /etc/rc.d/rc.local</code>，在最后加上：</p>
<blockquote>
<p>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose -f<br>&#x2F;usr&#x2F;local&#x2F;bitwarden&#x2F;docker-compose.yml up -d</p>
</blockquote>
<p>bitwarden 搭建完成，访问 <a href="https://你的域名/admin">https:&#x2F;&#x2F;你的域名&#x2F;admin</a> 输入上述配置文件的管理密码，可以进去管理面板；修改配置，需要重新启动容器以便生效：<code>docker-compose down &amp;&amp; docker-compose up -d</code></p>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>网页访问搭建号的账号注册账号（如果是个人使用注册完以后将上述 <code>SIGNUPS_ALLOWED=true</code> 字段修改为 <code>SIGNUPS_ALLOWED=false</code> 然后重启容器），于此同时登录 LastPass 导出密码（虽说需要输入主密码，但是导出的文件里的密码居然是明文的）：</p>
<p><img src="https://i.loli.net/2019/12/12/iKJjaMpeOFkLD6s.png" alt="img"></p>
<p>切回 Bitwarden 页面，点击<code>工具</code>-&gt;<code>导入数据</code>；选择 LassPass，再见上述步骤得到的内容直接复制粘贴到第二个红框中或者选择你得到的 csv 文件。</p>
<p><img src="https://i.loli.net/2019/12/12/nGey5PXOErDphqv.png" alt="img"></p>
<h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><p>市面商所有平台都可以使用，详情见官方<a href="https://bitwarden.com/#download">下载页面</a><br>PS.Chromium 版的 Microsoft Edge 扩展链接没有列出：<a href="https://microsoftedge.microsoft.com/insider-addons/detail/jbkfoedolllekgbhcbcoahefnbanhhlh">Microsoft Store</a>，装好以后点击设置，输入自定义的域名，其他选项按实际情况填写。</p>
<p><img src="https://i.loli.net/2019/12/12/ErTowNnD29b8yxM.png" alt="img"></p>
<p>所有客户端设置界面相同，另外中文界面好评，先用一段时间；如果没有问题，准备将 LastPass 账号彻底删掉！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bitwarden</tag>
        <tag>密码服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Picgo对接Hidove图床</title>
    <url>/post/9429.html</url>
    <content><![CDATA[<p><strong>说明</strong><br>最近几天陆续有小伙伴问我如何使用<code>PicGo</code>、<code>UPic</code>等客户端图床工具该如何配置对接<code>Hidove图床</code>。<br>我挨个看了看，觉得<code>PicGo</code>很不错，各种系统都支持，所以介绍一下<code>PicGo</code>的用法，其他工具用法也可以照葫芦画瓢，就不说了。</p>
<span id="more"></span>
<h1 id="安装需要"><a href="#安装需要" class="headerlink" title="安装需要"></a>安装需要</h1><h2 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h2><ul>
<li><a href="https://blog.hidove.cn/go/aHR0cHM6Ly9tb2x1bmVyZmlubi5jb20vUGljR28v">https://molunerfinn.com/PicGo/</a></li>
</ul>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><ul>
<li><a href="https://blog.hidove.cn/go/aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">https://nodejs.org/en/</a></li>
</ul>
<blockquote>
<p>在插件界面的搜索栏搜索插件名<code>web-uploader</code>并安装</p>
</blockquote>
<p><a href="https://cdn.69s.pp.ua/2020/03/31/3655a0d9b9aa43dc.png"><img src="https://cdn.69s.pp.ua/2020/03/31/3655a0d9b9aa43dc.png" alt="使用PicGo对接Hidove图床"></a></p>
<h2 id="配置web-uploader"><a href="#配置web-uploader" class="headerlink" title="配置web-uploader"></a>配置<code>web-uploader</code></h2><p><a href="https://cdn.69s.pp.ua/2020/04/01/8f06b9a51e6ece1d.png"><img src="https://cdn.69s.pp.ua/2020/04/01/8f06b9a51e6ece1d.png" alt="使用PicGo对接Hidove图床"></a></p>
<ul>
<li>Json路径</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.url.distribute</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义Body问标准Json格式数据，请按需求修改</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;token&quot;:&quot;xxxxxxxxxxxxx&quot;,&quot;apiType&quot;:&quot;ali&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="上传完毕"><a href="#上传完毕" class="headerlink" title="上传完毕"></a>上传完毕</h2><p><a href="https://cdn.69s.pp.ua/2020/04/01/68fc9e9ec0006948.png"><img src="https://cdn.69s.pp.ua/2020/04/01/68fc9e9ec0006948.png" alt="使用PicGo对接Hidove图床"></a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>Picgo</tag>
        <tag>Hidove</tag>
      </tags>
  </entry>
  <entry>
    <title>完整的Heroku入门搭建使用教程</title>
    <url>/post/95c5.html</url>
    <content><![CDATA[<p>Heroku有滥用危险，后果可能就是封禁账号。</p>
<span id="more"></span>
<h3 id="一、配置Heroku"><a href="#一、配置Heroku" class="headerlink" title="一、配置Heroku"></a>一、配置Heroku</h3><p>1、首先注册Heroku账号，点击通过 <a href="https://dashboard.heroku.com/">https://dashboard.heroku.com</a> 注册一个账号，注册时候不能使用QQ邮箱！<br><img src="https://s1.ax1x.com/2020/07/08/UE0AGF.png" alt="img"></p>
<p>2、注册成功以后登录，登录以后点击 <a href="https://dashboard.heroku.com/new?template=https://github.com/bclswl0827/v2ray-heroku">https://dashboard.heroku.com/new?template=https%3A%2F%2Fgithub.com%2Fbclswl0827%2Fv2ray-heroku</a> 部署应用！名称随便填写就行了，然后点击 Deploy app 系统会自动部署。<br><img src="https://s1.ax1x.com/2020/07/08/UE0RZq.png" alt="img"></p>
<p>3、部署完成以后，点击 Settings 再点击 Reveal Config Vars 就可以看见 UUID了！记下自己的UUID等会还是用到。<br><img src="https://s1.ax1x.com/2020/07/08/UEB1wq.png" alt="img"></p>
<p>4、接着下滑，看见Domains项后有个域名！https:&#x2F;&#x2F;*****.herokuapp.com&#x2F; 记下域名，稍后配置CloudFlare 反向代理会用到！<br><img src="https://s1.ax1x.com/2020/07/08/UEBOXj.png" alt="img"></p>
<h3 id="二、配置CloudFlare反向代理！"><a href="#二、配置CloudFlare反向代理！" class="headerlink" title="二、配置CloudFlare反向代理！"></a>二、配置CloudFlare反向代理！</h3><p>1、首先登陆CloudFlare官网，然后点击 右侧的 Workers ！<br><img src="https://s1.ax1x.com/2020/07/08/UEDnN6.png" alt="img"></p>
<p>2、接着点击创建Workers<br><img src="https://s1.ax1x.com/2020/07/08/UEDruj.png" alt="img"></p>
<p>3、接着复制下方代码，并添加进去！注意把下面的中文替换成你之前在Domains项看见的那个域名前缀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">  &quot;fetch&quot;,event =&gt; &#123;</span><br><span class="line">     let url=new URL(event.request.url);</span><br><span class="line">     url.hostname=&quot;你的heroku域名.herokuapp.com&quot;;</span><br><span class="line">     let request=new Request(url,event.request);</span><br><span class="line">     event. respondWith(</span><br><span class="line">       fetch(request)</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<p><img src="https://s1.ax1x.com/2020/07/08/UErpqA.png" alt="img"></p>
<p>至此！CF就配置完成了，接下来开始配置V2客户端！</p>
<h3 id="三、配置V2客户端"><a href="#三、配置V2客户端" class="headerlink" title="三、配置V2客户端"></a>三、配置V2客户端</h3><p>1、客户端下载地址：<a href="https://c-t.work/s/f8cae431052b4a">https://c-t.work/s/f8cae431052b4a</a> 取件码：y258qy</p>
<p>2、配置客户端。请按照图片的要求设置！否则不能联网！<br><img src="https://s1.ax1x.com/2020/07/08/UEs0mj.png" alt="img"></p>
<p>3、测试是否生效！我这里用的是笨牛网自选的IP，速度不是很好。如果有大佬有效果理想的，可以分享给我一个。<br><img src="https://s1.ax1x.com/2020/07/08/UEs6hV.png" alt="img"></p>
<h3 id="四、自选IP"><a href="#四、自选IP" class="headerlink" title="四、自选IP"></a>四、自选IP</h3><p>下载自选IP程序，然后windows系统运行即可，全自动化 点击链接获取文件：<a href="https://c-t.work/s/68589d254fb741">https://c-t.work/s/68589d254fb741</a> 取件码：khnvjb（24小时内有效）</p>
<p>4、实际效果图<br><img src="https://s1.ax1x.com/2020/07/08/UEyw8K.png" alt="img"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Heroku</tag>
        <tag>反代</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板解锁Nginx防火墙及网站监控报表</title>
    <url>/post/5ff4.html</url>
    <content><![CDATA[<p>宝塔面板解锁Nginx防火墙及网站监控报表<br>测试环境：Ubuntu &#x2F; Debian &#x2F; CentOS<br>测试时间：2021-08-10<br>宝塔版本：7.6.0<br>仅测试了Nginx防火墙及网站监控报表两款插件，其它收费插件未测试<br>其它系统及版本未进行测试，请自行验证，请勿在生产环境下进行测试！<br>注意：修改代码后需要重启面板服务才能使其生效，如果面板出现乱码重启服务器即可；</p>
<span id="more"></span>

<p>开始<br>打开目录&#x2F;www&#x2F;server&#x2F;panel&#x2F;class找到并编辑panelplugin.py文件<br>使用Ctrl+F搜索并找到<code>softList[&#39;list&#39;] = tmpList</code>这段代码，在其下方添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     softList[&#x27;pro&#x27;] = 1</span><br><span class="line">for soft in softList[&#x27;list&#x27;]:</span><br><span class="line">   soft[&#x27;endtime&#x27;] = 0</span><br></pre></td></tr></table></figure>

<p>示例：<br><img src="https://gitee.com/chwl6/chwl/raw/master/img/Nginx.webp" alt="img"><br>修改完成后重启面板，重启完成后就可以直接安装收费的插件了，Nginx防火墙也可以直接安装使用</p>
<p>网站监控报表<br>如果需要使用网站监控报表还需另外修改一次代码：<br>安装好网站监控报表插件后打开&#x2F;www&#x2F;server&#x2F;panel&#x2F;plugin&#x2F;total目录并编辑total_main.py文件<br>使用Ctrl+F搜索并找到<code>if &#39;bt_total&#39; in session: return public.returnMsg(True,&#39;OK!&#39;);</code>这段代码<br>在这段代码前加上#将其注释掉，并在其下方加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session[&#x27;bt_total&#x27;] = True</span><br><span class="line">return public.returnMsg(True,&#x27;OK!&#x27;);</span><br></pre></td></tr></table></figure>

<p>示例：<br><img src="https://gitee.com/chwl6/chwl/raw/master/img/Nginx9b07db2a85c21c12.webp" alt="img"><br>然后再次重启面板，即可使用网站监控报表插件了；</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>宝塔</tag>
        <tag>解锁</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>注册激活Navicat全系产品的开源代码分享</title>
    <url>/post/1e52.html</url>
    <content><![CDATA[<p>前一段儿时间我水了一篇文章介绍了PJ版本的Navicat，当时有大佬PM我，说有一个开源的注册机。当时也没时间测试一直没写文章！</p>
<p>最近几天我的Navicat出问题了，打算新装一下！正好试一试这个开源代码！果然可行！！</p>
<p>博主亲测：Navicat Premium 12.1.22 + Windows 10 X64 激活成功！</p>
 <span id="more"></span>

<h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><p><a href="https://github.com/DoubleLabyrinth/navicat-keygen">https://github.com/DoubleLabyrinth/navicat-keygen</a></p>
<h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>访问 <a href="https://www.navicat.com.cn/products">https://www.navicat.com.cn/products</a>，选择自己需要的产品点击【免费试用】即可下载软件！</p>
<h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><p>1）<a href="https://github.com/DoubleLabyrinth/navicat-keygen/releases">访问地址</a>，下载PJ程序！注意X64的系统要选择X64的软件！</p>
<p>2）将软件包解压，将里面的2个文件复制到D盘！</p>
<p>3）以管理员运行 CMD 命令（<strong>按Win + X，选择 命令提示符（管理员）</strong>）</p>
<p>4）分别执行以下命令！其中第一条命令中引号中的内容伟Navicat安装目录！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">navicat-patcher.exe &quot;C:\Program Files\PremiumSoft\Navicat Premium 12&quot;</span><br><span class="line">navicat-keygen.exe -text ./RegPrivateKey.pem</span><br></pre></td></tr></table></figure>

<p>执行第二条命令后，选择产品和语言以及版本！最后生成一个激活码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Select Navicat product:</span><br><span class="line">0. DataModeler</span><br><span class="line">1. Premium</span><br><span class="line">2. MySQL</span><br><span class="line">3. PostgreSQL</span><br><span class="line">4. Oracle</span><br><span class="line">5. SQLServer</span><br><span class="line">6. SQLite</span><br><span class="line">7. MariaDB</span><br><span class="line">8. MongoDB</span><br><span class="line">9. ReportViewer</span><br><span class="line"> </span><br><span class="line">(Input index)&amp;gt; 1</span><br><span class="line"> </span><br><span class="line">Select product language:</span><br><span class="line">0. English</span><br><span class="line">1. Simplified Chinese</span><br><span class="line">2. Traditional Chinese</span><br><span class="line">3. Japanese</span><br><span class="line">4. Polish</span><br><span class="line">5. Spanish</span><br><span class="line">6. French</span><br><span class="line">7. German</span><br><span class="line">8. Korean</span><br><span class="line">9. Russian</span><br><span class="line">10. Portuguese</span><br><span class="line"> </span><br><span class="line">(Input index)&amp;gt; 1</span><br><span class="line"> </span><br><span class="line">(Input major version number, range: 0 ~ 15, default: 12)&amp;gt; 12</span><br><span class="line"> </span><br><span class="line">Serial number:</span><br><span class="line">NAVO-2ORP-IN5A-GQEE</span><br></pre></td></tr></table></figure>

<p>5）启动Navicat程序 – 菜单 – 帮助 – 注册。将序列号填入。</p>
<p>6）电脑断网，然后点击【激活】- 选择【手动激活】会生成请求码</p>
<p>7）将请求码复制到命令提示符框内，按<strong>2</strong>次回车！会生成激活码！</p>
<p>8）将激活码复制到升级框内，点击【激活】，然后激活成功！</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1）之前使用其他破解版，需要卸载后重启电脑，然后删除原安装目录。</p>
<p>2）操作过程中错误，从头再来一次即可。</p>
<p>3）PJ输入的组织名不要太长！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Navicat</tag>
        <tag>注册机</tag>
      </tags>
  </entry>
</search>
